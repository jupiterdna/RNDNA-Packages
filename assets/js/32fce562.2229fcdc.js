"use strict";(self.webpackChunkweb_docs=self.webpackChunkweb_docs||[]).push([[915],{500:(e,s,d)=>{d.r(s),d.d(s,{assets:()=>h,contentTitle:()=>o,default:()=>a,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var t=d(1085),c=d(1184),n=d(4506);const r={id:"checkbox",title:"Checkbox"},o="Checkbox",i={id:"components/checkbox",title:"Checkbox",description:"component is a user interface element that allows users to toggle between two states, typically checked and unchecked. It's commonly used in forms or settings screens where users need to make binary choices.",source:"@site/docs/components/Checkbox.mdx",sourceDirName:"components",slug:"/components/checkbox",permalink:"/docs/components/checkbox",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/components/Checkbox.mdx",tags:[],version:"current",frontMatter:{id:"checkbox",title:"Checkbox"},sidebar:"docs",previous:{title:"Card",permalink:"/docs/components/card"},next:{title:"Checkbox Group",permalink:"/docs/components/checkbox-group"}},h={},l=[{value:"Usage",id:"usage",level:2},{value:"Props",id:"props",level:2}];function x(e){const s={code:"code",h1:"h1",h2:"h2",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"checkbox",children:"Checkbox"}),"\n",(0,t.jsx)(s.p,{children:"component is a user interface element that allows users to toggle between two states, typically checked and unchecked. It's commonly used in forms or settings screens where users need to make binary choices."}),"\n",(0,t.jsx)(s.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)("div",{class:"row inline-flex-center items-center",children:[(0,t.jsx)("div",{class:"col col--3",children:(0,t.jsx)("h4",{children:"Import"})}),(0,t.jsx)("div",{class:"col col--9",children:(0,t.jsx)(n.A,{children:"import { DNACheckbox } from '@rndna/checkbox';"})})]}),"\n",(0,t.jsx)(s.h2,{id:"props",children:"Props"}),"\n",(0,t.jsx)("div",{class:"table-responsive",children:(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Name"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Default"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"testID"})}),(0,t.jsx)(s.td,{children:"String"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"Undefined"})}),(0,t.jsx)(s.td,{children:"Property to be used for testing"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"id"})}),(0,t.jsx)(s.td,{children:"String"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"Undefined"})}),(0,t.jsx)(s.td,{children:"Property that is used to pass in the id parameter of code."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"value"})}),(0,t.jsx)(s.td,{children:"String"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"Undefined"})}),(0,t.jsx)(s.td,{children:"Property that defines the value of the selected option."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"label"})}),(0,t.jsx)(s.td,{children:"String"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"Undefined"})}),(0,t.jsx)(s.td,{children:"Property that defines the label of the option."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"disabled"})}),(0,t.jsx)(s.td,{children:"boolean"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"false"})}),(0,t.jsx)(s.td,{children:"Property that defines the label of the option."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"checked"})}),(0,t.jsx)(s.td,{children:"boolean"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"false"})}),(0,t.jsx)(s.td,{children:"Property where the user can checked or unchecked the certain option"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"size"})}),(0,t.jsx)(s.td,{children:"sizeProps"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"false"})}),(0,t.jsx)(s.td,{children:"Property that defines the size of the component or a selection"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"onPress"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"(event: GestureResponderEvent) => void"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"Undefined"})}),(0,t.jsx)(s.td,{children:"Handler when the component is pressed"})]})]})]})})]})}function a(e={}){const{wrapper:s}={...(0,c.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(x,{...e})}):x(e)}}}]);