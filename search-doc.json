{"searchDocs":[{"title":"MDX Blog Post","type":0,"sectionRef":"#","url":"/blog/mdx-blog-post","content":"Blog posts support Docusaurus Markdown features, such as MDX. tip Use the power of React to create interactive blog posts. &lt;button onClick={() =&gt; alert('button clicked!')}&gt;Click me!&lt;/button&gt; Click me!","keywords":"","version":null},{"title":"Welcome","type":0,"sectionRef":"#","url":"/blog/welcome","content":"Docusaurus blogging features are powered by the blog plugin. Simply add Markdown files (or folders) to the blog directory. Regular blog authors can be added to authors.yml. The blog post date can be extracted from filenames, such as: 2019-05-30-welcome.md2019-05-30-welcome/index.md A blog post folder can be convenient to co-locate blog post images: The blog supports tags as well! And if you don't want a blog: just delete this directory, and use blog: false in your Docusaurus config.","keywords":"","version":null},{"title":"First Blog Post","type":0,"sectionRef":"#","url":"/blog/first-blog-post","content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":"","version":null},{"title":"AvatarWithBadge","type":0,"sectionRef":"#","url":"/docs/component_usage/AvatarWithBadge","content":"AvatarWithBadge","keywords":"","version":"Next"},{"title":"Avatar","type":0,"sectionRef":"#","url":"/docs/component_usage/Avatar","content":"Avatar","keywords":"","version":"Next"},{"title":"Long Blog Post","type":0,"sectionRef":"#","url":"/blog/long-blog-post","content":"This is the summary of a very long blog post, Use a &lt;!-- truncate --&gt; comment to limit blog post size in the list view. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":"","version":null},{"title":"Checkbox","type":0,"sectionRef":"#","url":"/docs/component_usage/Checkbox","content":"Checkbox","keywords":"","version":"Next"},{"title":"CheckboxGroup","type":0,"sectionRef":"#","url":"/docs/component_usage/CheckboxGroup","content":"CheckboxGroup","keywords":"","version":"Next"},{"title":"Badge","type":0,"sectionRef":"#","url":"/docs/component_usage/Badge","content":"Badge","keywords":"","version":"Next"},{"title":"Button","type":0,"sectionRef":"#","url":"/docs/component_usage/Button","content":"Button","keywords":"","version":"Next"},{"title":"AvatarWithStatus","type":0,"sectionRef":"#","url":"/docs/component_usage/AvatarWithStatus","content":"AvatarWithStatus","keywords":"","version":"Next"},{"title":"Icon","type":0,"sectionRef":"#","url":"/docs/component_usage/Icon","content":"Icon","keywords":"","version":"Next"},{"title":"Chip","type":0,"sectionRef":"#","url":"/docs/component_usage/Chip","content":"Chip","keywords":"","version":"Next"},{"title":"Switch","type":0,"sectionRef":"#","url":"/docs/component_usage/Switch","content":"Switch","keywords":"","version":"Next"},{"title":"RadioButton","type":0,"sectionRef":"#","url":"/docs/component_usage/RadioButton","content":"RadioButton","keywords":"","version":"Next"},{"title":"Image","type":0,"sectionRef":"#","url":"/docs/component_usage/Image","content":"Image","keywords":"","version":"Next"},{"title":"Text","type":0,"sectionRef":"#","url":"/docs/component_usage/Text","content":"Text","keywords":"","version":"Next"},{"title":"Fab","type":0,"sectionRef":"#","url":"/docs/component_usage/Fab","content":"Fab","keywords":"","version":"Next"},{"title":"Badge","type":0,"sectionRef":"#","url":"/docs/components/badge","content":"Badge Badge is a component that is used to display a small amount of information, such as a number or an icon, on top of another component. often as a visual indicator like a colored circle or a number. Badges are commonly used to indicate notifications, unread messages, alerts, or any other piece of information that needs to be highlighted. Usage​ Import import { DNABadge } from '@rndna/badge'; Props​ Name\tType\tDefault\tDescriptiontestID\tString\tUndefined\tProperty to be used for testing value\tString\tUndefined\tWhere you can define the text of the component children\tReact.ReactNode\tundefined\tProperty that defines the source URL of the image/element to be used. style\tStyleProp&lt;ViewStyle&gt; undefined\tProperty that defines the size of the component. color\tcolorProps\tprimary\tProperty that defines the size of the component. position\t&quot;top&quot; , &quot;bottom&quot; , &quot;inline&quot; top\tProperty that defines the size of the component.","keywords":"","version":"Next"},{"title":"Avatar With Badge","type":0,"sectionRef":"#","url":"/docs/components/avatar-with-badge","content":"Avatar With Badge Avatar with badge component typically refers to a user interface element that combines an avatar (profile picture or icon) with a badge, which is usually a small visual indicator such as a colored dot or a number. This type of component is commonly used in applications to display user profiles, notifications, or status indicators. Usage​ Import import { DNAAvatarWithBadge } from '@rndna/avatar'; Props​ Name\tType\tDefault\tDescriptiontestID\tString\tUndefined\tProperty to be used for testing name\tString\tUndefined\tProperty that defines the full name of the avatar. imageSource\tstring / ImageSrc\tundefined\tProperty that defines the source URL of the image/element to be used. size\tSizeProps ( &quot;xs&quot;,&quot;sm&quot;,&quot;md&quot;,&quot;lg&quot;, &quot;xl&quot;)\tmd\tProperty that defines the size of the component. borderRadius\t(&quot;squared&quot;, &quot;soft_edged&quot;, &quot;rounded&quot;)\tundefined\tProperty that defines the border dimensions of the component. color\tcolorProps (&quot;primary&quot;, &quot;secondary&quot;,&quot;info&quot;, &quot;success&quot;, &quot;warning&quot;, &quot;danger&quot;, &quot;default&quot;)\tdefault\tProperty that changes theme of the component, i.e. background and text color, alt\tString\tundefined\tProperty that defines the alternative text of the image in the avatar. icon\tReact.JSX.Element\tundefined\tProperty that enables user to select icon from icon library. onPress\t(event: GestureResponderEvent) =&gt; void\tundefined\tHandler when the component is clicked. badge\tIWithBadgeType {color?: colorProps, value?: string}\tundefined\tProperty that defines badge of the avatar","keywords":"","version":"Next"},{"title":"Avatar With Status","type":0,"sectionRef":"#","url":"/docs/components/avatar-with-status","content":"Avatar With Status Avatar with status component is similar to the &quot;Avatar with Badge&quot; component, but instead of displaying a numerical badge value, it typically displays a status indicator associated with the avatar. This status indicator could represent various states such as online, offline, busy, away, etc. It's commonly used in messaging applications, social media platforms, or any application where users need to know the availability or status of other users. Usage​ Import import { DNAAvatarWithStatus } from '@rndna/avatar'; Props​ Name\tType\tDefault\tDescriptiontestID\tString\tUndefined\tProperty to be used for testing name\tString\tUndefined\tProperty that defines the full name of the avatar. imageSource\tstring / ImageSrc\tundefined\tProperty that defines the source URL of the image/element to be used. size\tSizeProps ( &quot;xs&quot;,&quot;sm&quot;,&quot;md&quot;,&quot;lg&quot;, &quot;xl&quot;)\tmd\tProperty that defines the size of the component. borderRadius\t(&quot;squared&quot;, &quot;soft_edged&quot;, &quot;rounded&quot;)\tundefined\tProperty that defines the border dimensions of the component. color\tcolorProps (&quot;primary&quot;, &quot;secondary&quot;,&quot;info&quot;, &quot;success&quot;, &quot;warning&quot;, &quot;danger&quot;, &quot;default&quot;)\tdefault\tProperty that changes theme of the component, i.e. background and text color, alt\tString\tundefined\tProperty that defines the alternative text of the image in the avatar. icon\tReact.JSX.Element\tundefined\tProperty that enables user to select icon from icon library. onPress\t(event: GestureResponderEvent) =&gt; void\tundefined\tHandler when the component is clicked. status\tIWithStatusType\tundefined\tProperty that defines status of the avatar where it will be &quot;online&quot; , &quot;offline&quot; , &quot;inactive&quot; , &quot;busy&quot; , undefined;","keywords":"","version":"Next"},{"title":"Card","type":0,"sectionRef":"#","url":"/docs/components/card","content":"Card Card content will be added soon... Usage​","keywords":"","version":"Next"},{"title":"Checkbox","type":0,"sectionRef":"#","url":"/docs/components/checkbox","content":"Checkbox component is a user interface element that allows users to toggle between two states, typically checked and unchecked. It's commonly used in forms or settings screens where users need to make binary choices. Usage​ Import import { DNACheckbox } from '@rndna/checkbox'; Props​ Name\tType\tDefault\tDescriptiontestID\tString\tUndefined\tProperty to be used for testing id\tString\tUndefined\tProperty that is used to pass in the id parameter of code. value\tString\tUndefined\tProperty that defines the value of the selected option. label\tString\tUndefined\tProperty that defines the label of the option. disabled\tboolean\tfalse\tProperty that defines the label of the option. checked\tboolean\tfalse\tProperty where the user can checked or unchecked the certain option size\tsizeProps\tfalse\tProperty that defines the size of the component or a selection onPress\t(event: GestureResponderEvent) =&gt; void\tUndefined\tHandler when the component is pressed","keywords":"","version":"Next"},{"title":"Avatar","type":0,"sectionRef":"#","url":"/docs/components/avatar","content":"Avatar Avatars are prevalent in UI design, appearing in various contexts such as lists and profile screens. They serve as visual representations of users and can incorporate photos, icons, or text to convey identity or information. Usage​ Import import { DNAAvatar } from '@rndna/avatar'; Props​ Name\tType\tDefault\tDescriptiontestID\tString\tUndefined\tProperty to be used for testing name\tString\tUndefined\tProperty that defines the full name of the avatar. imageSource\tstring / ImageSrc\tundefined\tProperty that defines the source URL of the image/element to be used. size\tSizeProps ( &quot;xs&quot;,&quot;sm&quot;,&quot;md&quot;,&quot;lg&quot;, &quot;xl&quot;)\tmd\tProperty that defines the size of the component. borderRadius\t(&quot;squared&quot;, &quot;soft_edged&quot;, &quot;rounded&quot;)\tundefined\tProperty that defines the border dimensions of the component. color\t(&quot;primary&quot;, &quot;secondary&quot;,&quot;info&quot;, &quot;success&quot;, &quot;warning&quot;, &quot;danger&quot;, &quot;default&quot;)\tdefault\tProperty that changes theme of the component, i.e. background and text color, alt\tString\tundefined\tProperty that defines the alternative text of the image in the avatar. icon\tReact.JSX.Element\tundefined\tProperty that enables user to select icon from icon library. onPress\t(event: GestureResponderEvent) =&gt; void\tundefined\tHandler when the component is clicked.","keywords":"","version":"Next"},{"title":"Checkbox Group","type":0,"sectionRef":"#","url":"/docs/components/checkbox-group","content":"Checkbox Group Checkbox Group is a higher-level component that manages a group of checkbox components together. It provides an interface for selecting multiple options from a list of choices and handles the state and behavior of the checkboxes as a group. Usage​ Import import { DNACheckboxGroup } from '@rndna/checkbox'; Props​ Name\tType\tDefault\tDescriptiontestID\tString\tUndefined\tProperty to be used for testing label\tString\tUndefined\tProperty that defines the label of the option. disabled\tboolean\tfalse\tProperty that defines the label of the option. orientation\thorizontal, vertical\thorizontal\tThe property that aligns the elements of the components required\tboolean\tfalse\tProperty that defines the size of the component or a selection assistiveText\tassistiveTextType\tundefined\tDisplay any assistive object or array of messages under the component (e.g. Warning or Error, etc.) children\tchildrenType\tundefined\tProperty that accept react node as children of radio group","keywords":"","version":"Next"},{"title":"Dialog","type":0,"sectionRef":"#","url":"/docs/components/dialog","content":"Dialog Dialog content will be added soon... Usage​","keywords":"","version":"Next"},{"title":"Dropdown","type":0,"sectionRef":"#","url":"/docs/components/dropdown","content":"Dropdown Dropdown content will be available soon... Usage​","keywords":"","version":"Next"},{"title":"Popover","type":0,"sectionRef":"#","url":"/docs/components/popover","content":"Popover Popover content will be available soon... Usage​","keywords":"","version":"Next"},{"title":"Fab","type":0,"sectionRef":"#","url":"/docs/components/fab","content":"Fab Fab components for displaying small graphical representations of programs or files from various sources: network, static, local, camera roll. Usage​ Import import { DNAFab } from '@rndna/fab'; Props​ Name\tType\tDefault\tDescriptionsize\txs, sm, md, lg, xl\tmd\tProperty that defines the size of the component. isOpen\tboolean\tfalse\tProperty that enables the FabItems display items\tArray\t[]\tDefines the options or items. onPress\t(event: GestureResponderEvent) =&gt; void, undefined\t() =&gt; {}\tHandler when the component is clicked inDrawer\tboolean\tfalse\tProperty that identify the if the fab is in the drawer.screen or not","keywords":"","version":"Next"},{"title":"Chip","type":0,"sectionRef":"#","url":"/docs/components/chip","content":"Chip Chips are condensed components capable of representing inputs, attributes, or actions. Usage​ Import import { DNAChip } from '@rndna/chip'; Props​ Name\tType\tDefault\tDescriptionlabel\tstring\tChip\tWhere you can define the label of the component. icon\tReact.JSX.Element\tundefined\tProperty that enables user to select icon from icon library variant\tsolid, outlined, soft\tsolid\tChanges the variation of the element. size\txs, sm, md, lg, xl\tmd\tProperty that defines the size of the component or a selection isClosable\tboolean\tfalse\tProperty that places a Closable button as X icon on the component to make it closable isDisabled\tboolean\tfalse\tProperty where the user can enable or disable the certain attribute or field color\tprimary, secondary, info, success, warning, danger\tprimary\tProperty that changes theme/state of the selection i.e. background and text color borderRadius\trounded, soft_edged\trounded\tDefines the border dimensions of the component onPressClose\t(event: GestureResponderEvent) =&gt; void\t() =&gt; {}\tHandler when the component is about to close style\tViewStyle\tundefined\tStyle that is an optional StyleProp&lt;ViewStyle&gt; object that applies to the outer content View component","keywords":"","version":"Next"},{"title":"Button","type":0,"sectionRef":"#","url":"/docs/components/button","content":"Button Button are found all over ui design from lists to profile screens. They are commonly used to represent a user and can contain photos, icons, or even text. Usage​ Import import { DNAButton } from '@rndna/button'; Props​ Name\tType\tDefault\tDescriptiontestID\tString\tUndefined\tProperty to be used for testing label\tString\tUndefined\tProperty that defines the label of the button. iconPosition\tstring / ImageSrc\tundefined\tProProperty that toggles the positon of icon on left or right size\tSizeProps ( &quot;xs&quot;,&quot;sm&quot;,&quot;md&quot;,&quot;lg&quot;, &quot;xl&quot;)\tfalse\tProperty that defines the size of the component. isLoading\tBoolean\tundefined\tProperty that enables or disables the loading property of component. color\tcolorProps (&quot;primary&quot;, &quot;secondary&quot;,&quot;info&quot;, &quot;success&quot;, &quot;warning&quot;, &quot;danger&quot;, &quot;default&quot;)\tdefault\tProperty that changes theme of the component, i.e. background and text color, icon\tReact.JSX.Element\tundefined\tProperty that enables user to select icon from icon library. onPress\t(event: GestureResponderEvent) =&gt; void\tundefined\tHandler when the component is clicked. loadingLabel\tString\tundefined\tProperty that helps in esbalishing loading text. variant\tsolid, outlined, flat, soft\tsolid\tChanges the variation of the element. borderRadius\tborderRadiusProps\tsoft_edged\tDefines the border dimensions of the component. isDisabled\tBoolean\tfalse\tProperty where the user can enable or disable the certain attribute or field fullWidth\tboolean\tfalse\tEnables the control to be 100% width inside the parent container. onPress\tonPress?: () =&gt; void\tundefined\tHandler when the component is clicked&quot; with &quot;Enables the control to be 100% width inside the parent container. rippleColor\tstring\tundefined\tProperty that defines the color of the ripple effect. rippleOpacity\tnumber\tundefined\tProperty that defines opacity of the ripple effect. rippleDuration\tnumber\tundefined\tProperty that defines the duration of ripple effect animation. rippleSize\tnumber\tundefined\tProperty that defines the size of the ripple effect. rippleCentered\tboolean\tfalse\tProperty that defines whether the ripple effect should be centered on the press point. rippleSequential\tboolean\tfalse\tProperty that defines whether the ripple effect should fade out. rippleFades\tboolean\tfalse\tProperty that defines whether the ripple effect should fade out. enableRipple\tboolean\tfalse\tProperty that defines whether the ripple effect should be enabled.","keywords":"","version":"Next"},{"title":"Radio Button","type":0,"sectionRef":"#","url":"/docs/components/radio-button","content":"Radio Button This component meant for easy selection and decision-making. By convention, only one button at a time can be selected Usage​ Import import { DNA } from '@rndna/radiobutton'; Props​ Name\tType\tDefault\tDescriptionid\tstring\tundefined\tProperty that is used to pass in the id parameter of code. value\tstring\tundefined\tProperty that defines the value of the selected option. label\tstring\tundefined\tProperty that defines the label of the option. disabled\tboolean\tfalse\tProperty where the user can enable or disable the certain option checked\tboolean\tfalse\tProperty where the user can checked or unchecked the certain option size\txs, sm, md, lg, xl\tmd\tProperty that defines the size of the component or a selection. onPress\t((event: GestureResponderEvent) =&gt; void), undefined\tundefined\tHandler when the component is pressed","keywords":"","version":"Next"},{"title":"Image","type":0,"sectionRef":"#","url":"/docs/components/image","content":"Image Image component for various image types: network, static, local, camera roll. Usage​ Import import { DNAImage } from '@rndna/image'; Props​ Name\tType\tDefault\tDescriptionratio\t1:1, 3:2, 4:3, 8:5, 16:9\t16:9\tProperty that allows you to define the desired width-to-height ratio of the image. fit\tcover, contain\tcover\tProperty that allows you to set the size to fit the available space of the image wrapper src\tstring\tundefined\tProperty that defines the source URL of the image/element to be used. size\txs, sm, md, lg, xl\tmd\tProperty that defines the size of the component or a selection borderRadius\tsquared, soft_edged, rounded\tsoft_edged\tDefines the border dimensions of the component","keywords":"","version":"Next"},{"title":"Spinner","type":0,"sectionRef":"#","url":"/docs/components/spinner","content":"Spinner Spinner content will be available soon... Usage​","keywords":"","version":"Next"},{"title":"Richtext Editor","type":0,"sectionRef":"#","url":"/docs/components/rte","content":"Richtext Editor Richtext Editor content will be available soon... Usage​","keywords":"","version":"Next"},{"title":"Text","type":0,"sectionRef":"#","url":"/docs/components/text","content":"Text component is used to render text elements within a React Native application DiAndroid designed for displaying text on mobile devices. Usage​ Import import { DNAText } from '@rndna/text'; Props​ note Includes all TextProps props from React Native Text. Name\tType\tDefault\tDescriptiontestID\tstring\tundefined\tProperty that defines the title of the component. type\th1 , h2 , h3 , h4 , h5 , h6 , label , body1 , body2 , caption , overline ,\tundefined\tProperty that defines the title of the component.","keywords":"","version":"Next"},{"title":"Tabs","type":0,"sectionRef":"#","url":"/docs/components/tabs","content":"Tabs Tabs content will be available soon... Usage​","keywords":"","version":"Next"},{"title":"Icon","type":0,"sectionRef":"#","url":"/docs/components/icon","content":"Icon Icon components for displaying small graphical representations of programs or files from various sources: network, static, local, camera roll. Usage​ Import import { UserIcon } from '@rndna/icon'; Props​ Name\tType\tDefault\tDescriptionwidth\tstring, number\t24\tProperty that defines the width of the component. height\tstring, number\t24\tProperty that defines the height of the component. viewBox\tstring\t0 0 24 24\tProperty that defines the position and dimension, in user space, of an SVG viewport preserveAspectRatio\tstring\txMidYMid meet\tProperty that defines how the aspect ratio of the viewBox is preserved. color\tstring\t#000\tProperty that defines the color of the component. title\tstring\tundefined\tProperty that defines the title of the component. size\tstring, number\t24\tProperty that defines the size of the component.","keywords":"","version":"Next"},{"title":"Header","type":0,"sectionRef":"#","url":"/docs/components/header","content":"Header Header content will be added soon... Usage​","keywords":"","version":"Next"},{"title":"Date of Birth","type":0,"sectionRef":"#","url":"/docs/field-level/date_of_birth","content":"Date of Birth Date of Birth field content will be available soon... Usage​","keywords":"","version":"Next"},{"title":"Progress","type":0,"sectionRef":"#","url":"/docs/components/progress","content":"Progress Progress content will be added soon... Usage​","keywords":"","version":"Next"},{"title":"TextInput","type":0,"sectionRef":"#","url":"/docs/components/textinput","content":"TextInput TextInput content will be added soon... Usage​","keywords":"","version":"Next"},{"title":"Switch","type":0,"sectionRef":"#","url":"/docs/components/switch","content":"Switch Switch is a component that allows the user to toggle between two states: on and off. Usage​ Import import { DNASwitch } from '@rndna/switch'; Props​ Name\tType\tDefault\tDescriptiontitle\tstring\tundefined\tProperty that defines the title of the component. titlePosition\ttop, bottom, left, right\ttop\tProperty that defines the position of title. labelRight\tstring\tundefined\tProperty that defines the right label of the component. labelLeft\tstring\tundefined\tProperty that defines the left label of the component. size\txs, sm, md, lg, xl\tundefined\tProperty that defines the size of the component or a selection color\tprimary, secondary, info, success, warning, danger, default\tprimary\tProperty that changes theme/state of the selection i.e. background and text color disabled\tboolean\tfalse\tProperty that defines the disabled state of the component. value\tboolean\tundefined\tProperty that defines the value of the component. onValueChange\t(value: boolean) =&gt; void\tundefined\tProperty that defines the callback function when the value of the component is changed. iconLeft React.JSX.Element\tundefined\tProperty that defines the left icon of the component. iconRight React.JSX.Element\tundefined\tProperty that defines the right icon of the component. variant\tsolid, filled\tsolid\tProperty that defines the variant of the component.","keywords":"","version":"Next"},{"title":"Email","type":0,"sectionRef":"#","url":"/docs/field-level/email","content":"Email Email field content will be available soon... Usage​","keywords":"","version":"Next"},{"title":"Date","type":0,"sectionRef":"#","url":"/docs/field-level/date","content":"Date Date field content will be available soon... Date​","keywords":"","version":"Next"},{"title":"Currency","type":0,"sectionRef":"#","url":"/docs/field-level/currency","content":"Currency Currency field content will be available soon... Usage​","keywords":"","version":"Next"},{"title":"Time","type":0,"sectionRef":"#","url":"/docs/field-level/time","content":"Time Time field content will be available soon... Usage​","keywords":"","version":"Next"},{"title":"Password","type":0,"sectionRef":"#","url":"/docs/field-level/password","content":"Password Password field content will be available soon... Usage​","keywords":"","version":"Next"},{"title":"Name","type":0,"sectionRef":"#","url":"/docs/field-level/name","content":"Name Name Field content will be available soon... Usage​","keywords":"","version":"Next"},{"title":"Phone Number","type":0,"sectionRef":"#","url":"/docs/field-level/phone_number","content":"Phone Number Phone Number field content will be available soon... Usage​","keywords":"","version":"Next"},{"title":"Zipcode","type":0,"sectionRef":"#","url":"/docs/field-level/zipcode","content":"Zipcode Zipcode field content will be available soon... Usage​","keywords":"","version":"Next"},{"title":"Intro","type":0,"sectionRef":"#","url":"/docs/getting-started/introduction","content":"Intro Welcome to the cutting-edge world of DNA React Native Packages, a revolutionary library designed to elevate your React Native app development experience. Our library is meticulously crafted to empower developers with a versatile collection of components that seamlessly integrate into your projects, bringing a new level of functionality and aesthetics. Quick sample​ Here's a quick example to get you started, it's literally all you need: import { DNAButton } from '@rndna/button'; const App = () =&gt; { return &lt;DNAButton title=&quot;Hello World&quot; /&gt;; }; Using themed components​ A unified theme seamlessly threads through the components within this library. With a centralized hub, developers can efficiently modify the color palette across all components. While this functionality greatly benefited library developers, it became apparent that end-users also sought an accessible means to leverage this feature. But why limit the centralization to just colors? What if we could extend this convenience to encompass the properties of every component? Thus, the concept of theming with React Native Elements was conceived! import { DNAButton } from '@rndna/button'; import { ThemeProvider, } from '@rndna/theme-provider'; const MyApp = () =&gt; { return ( &lt;ThemeProvider&gt; &lt;DNAButton title=&quot;Hey!&quot; /&gt; &lt;/ThemeProvider&gt; ); }; For personalized theme customization or integration into your own components, please refer to the documentation on Customization.","keywords":"","version":"Next"},{"title":"Installation","type":0,"sectionRef":"#","url":"/docs/getting-started/installation","content":"Installation Each component is constructed independently, requiring the installation of the specific control you intend to use. For Example: npmYarnpnpm npm install @rndna/theme-provider @rndna/button Additionally, for the iOS platform, it is necessary to link the native components of the library. cd ios pod install ","keywords":"","version":"Next"},{"title":"Customization","type":0,"sectionRef":"#","url":"/docs/getting-started/customization","content":"Customization After setting up your React Native app, you have the flexibility to tailor the theme according to your preferences, including customization of colors, fonts, and more. Colors​ Refer to the provided code example for instructions on overriding the color configuration. import React from 'react'; import { ThemeProvider, configType, themeConfig, } from '@rndna/theme-provider'; const Native = () =&gt; { const config: themeConfig = { ...themeConfig, colors: {...themeConfig.colors, danger: 'red', default: 'black'}, } return ( &lt;ThemeProvider config={config}&gt; // your code &lt;/ThemeProvider&gt; ); }; export default Native; Fonts​ For handling fonts, utilize the following code snippet: import React from 'react'; import { ThemeProvider, configType, themeConfig, } from '@rndna/theme-provider'; const Native = () =&gt; { const config: themeConfig = { ...themeConfig, colors: {...themeConfig.fonts: 'Roboto'}, } return ( &lt;ThemeProvider config={config}&gt; // your code &lt;/ThemeProvider&gt; ); }; export default Native; ","keywords":"","version":"Next"}],"options":{"id":"default"}}